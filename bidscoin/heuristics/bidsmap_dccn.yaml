# --------------------------------------------------------------------------------
# This is a template bidsmap with the key-value mappings for the different BIDS
# datatypes (anat, func, dwi, etc). The datatype attributes are the keys that map
# onto the BIDS labels. The bidsmap data-structure should be 5 levels deep:
#
# dict       : dict     : list     : dict        : dict
# dataformat : datatype : run-item : bidsmapping : mapping-data
#
# NB:
# 1) This bidsmap is intended to be used by the bidsmapper for data discovery.
#    Although generally not recommended, it can also be used directly by the bidscoiner
# 2) This bidsmap is tailored to standard data acquisitions at the Donders Centre for
#    Cognitive Neuroimaging (DCCN). You may consider (Institute) users may create their
#    own bidsmap_[template].yaml or bidsmap_[sample].yaml file
#
# For more information, see: https://bidscoin.readthedocs.io
# --------------------------------------------------------------------------------


Options:
# --------------------------------------------------------------------------------
# General options and plugins
# --------------------------------------------------------------------------------
  bidscoin:
    version: 4.1.1                  # BIDScoin version (should correspond with the version in pyproject.toml)
    bidsignore: mrs/;extra_data/;sub-*_ct.*    # Semicolon-separated list of entries that are added to the .bidsignore file (for more info, see BIDS specifications), e.g. extra_data/;pet/;myfile.txt;yourfile.csv
    subprefix: sub-                 # The subject prefix of the source data
    sesprefix: ses-                 # The session prefix of the source data
    unknowntypes: [mrs, extra_data] # A list of datatypes that are converted to BIDS-like datatype folders
    ignoretypes: [exclude]          # A list of datatypes that are excluded / not converted to BIDS
    unzip:                          # Wildcard pattern to select tarball/zip-files in the source folders that need to be unzipped (in a tempdir) to expose the data, e.g. '*.tar.gz'
  plugins:                          # List of plugins with plugin-specific key-value pairs (that can be used by the plugin)
    dcm2niix2bids:                  # See dcm2niix -h and https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#General_Usage for more info
      command: dcm2niix             # Command to run dcm2niix, e.g. "module add dcm2niix/1.0.20180622; dcm2niix" or "PATH=/opt/dcm2niix/bin:$PATH; dcm2niix" or /opt/dcm2niix/bin/dcm2niix or 'C:\"Program Files"\dcm2niix\dcm2niix.exe' (use quotes to deal with whitespaces in the path)
      args: -b y -z y -i n -l n     # Argument string that is passed to dcm2niix. Tip: SPM users may want to use '-z n' (which produces unzipped NIfTI's, see dcm2niix -h for more information)
      anon: y                       # Set this anonymization flag to 'y' to round off age and discard acquisition date from the meta data
      meta: [.json, .tsv, .tsv.gz]  # The file extensions of the equally named metadata sourcefiles that are copied over to the BIDS sidecar files
#    spec2nii2bids:                  # The settings for the spec2nii2bids plugin
#      command: spec2nii             # Command to run spec2nii, e.g. "module add spec2nii; spec2nii" or "PATH=/opt/spec2nii/bin:$PATH; spec2nii" or /opt/spec2nii/bin/spec2nii or 'C:\"Program Files"\spec2nii\spec2nii.exe' (note the quotes to deal with the whitespace)
#      args:                         # Argument string that is passed to spec2nii (see spec2nii -h for more information)
#      anon: y                       # Set this anonymization flag to 'y' to round off age and discard acquisition date from the meta data
#      meta: [.json, .tsv, .tsv.gz]  # The file extensions of the equally named metadata sourcefiles that are copied over to the BIDS sidecar files
#      multiraid: 2                  # The mapVBVD argument for selecting the multiraid Twix file to load (default = 2, i.e. 2nd file)
#    pet2bids:
#      command: dcm2niix4pet
#      args:
#      anon:
#      meta: [.json, .tsv]


DICOM:
# --------------------------------------------------------------------------------
# DICOM key-value heuristics (DICOM fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>   # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>   # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  anat:       # ----------------------- All anatomical runs --------------------
  - provenance:                   # The fullpath name of the DICOM file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    properties: &fileprop         # This is an optional (stub) entry of properties matching (could be added to any run-item)
      filepath:                   # File folder, e.g. ".*/Parkinson/.*" or ".*(phantom|bottle).*"
      filename:                   # File name, e.g. ".*fmap.*" or ".*(fmap|field.?map|B0.?map).*"
      filesize:                   # File size, e.g. "2[4-6]\d MB" for matching files between 240-269 MB
      nrfiles:                    # Number of files in the folder
    attributes: &anat_dicomattr   # An empty / non-matching reference dictionary that can be derefenced in other run-items of this data type
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      EchoPulseSequence:          # Enhanced DICOM
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &anat_dicoment_nonparametric  # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>    # This will be expanded by the bidsmapper (so the user can edit it in the bidseditor)
      ce:
      rec:
      run: <<>>                   # This will be updated dynamically during bidscoiner runtime (as it depends on the already existing files)
      part: ['', mag, phase, real, imag, 0]   # # This BIDS value list will be shown as a dropdown menu in the bidseditor with the first (empty) item selected (as indicated by the last item, i.e. 0)
      suffix: T1w
    meta:                         # This is an optional entry for meta-data that will be appended to the json sidecar files produced by dcm2niix
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*(MPRAGE|T1w).*
      MRAcquisitionType: 3D
    bids: *anat_dicoment_nonparametric
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T2w.*
      SequenceVariant: "['SK', 'SP']"
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2w
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*TSE.*vfl.*
      ImageType: .*'NORM'.*             # NB: The non-NORM image is saved in 'extra_data'
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2w
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: .*PDw.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: PDw
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T2star.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2starw
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*FLAIR.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: FLAIR
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*Inplane.?T1.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: inplaneT1
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*Inplane.?T2.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: inplaneT2
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: .*PDT2.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: PDT2
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*ANGIO.*
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: angio
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T1.?map.*
    bids: &anat_dicoment_parametric     # See: schema/datatypes/anat.yaml
      acq: <ProtocolName>
      ce:
      rec:
      run: <<>>
      suffix: T1map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T2.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: T2map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T2star.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: T2starmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*R1.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: R1map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*R2.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: R2map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*R2star.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: R2starmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*PD.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: PDmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MTR.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTRmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MT.?sat.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTsat
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MP2RAGE.*
      SeriesDescription: (?i).*UNI.*
      MRAcquisitionType: 3D
    bids:
      <<: *anat_dicoment_parametric
      suffix: UNIT1
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*T1rho.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: T1rho
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MWF.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: MWFmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MTV.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTVmap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*PDT2.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: PDT2map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*Chi.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: Chimap
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*S0.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: S0map
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*M0.?map.*
    bids:
      <<: *anat_dicoment_parametric
      suffix: M0map
  - provenance:
    attributes: *anat_dicomattr
    bids: &anat_dicoment_defacemask     # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      mod:
      suffix: defacemask
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*ME.?SE.*
    bids: &anat_dicoment_multiecho      # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      echo: <EchoNumbers>
      part: ['', mag, phase, real, imag, 0]
      suffix: MESE
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*ME.?GRE.*
    bids:
      <<: *anat_dicoment_multiecho
      suffix: MEGRE
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*VFA.*
    bids: &anat_dicoment_multiflip      # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      echo: <EchoNumbers>
      run: <<>>
      flip:
      part: ['', mag, phase, real, imag, 0]
      suffix: VFA
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*IR.?T1.*
    bids: &anat_dicoment_multiinv       # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      inv:
      part: ['', mag, phase, real, imag, 0]
      suffix: IRT1
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MP2RAGE.*
      SeriesDescription: (?i).*INV1.*
      MRAcquisitionType: 3D
    bids: &anat_dicoment_mp2rage        # See: schema/datatypes/anat.yaml
      acq: <ProtocolName>
      ce:
      rec:
      run: <<>>
      echo:
      flip:
      inv: 1
      part: ['', mag, phase, real, imag, 0]
      suffix: MP2RAGE
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MP2RAGE.*
      SeriesDescription: (?i).*INV2.*
      MRAcquisitionType: 3D
    bids:
      <<: *anat_dicoment_mp2rage
      inv: 2
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MPM.*
      EffectiveEchoTime:
    bids: &anat_dicoment_vfamt          # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      echo:
      flip:
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MPM
    meta:
      EffectiveEchoTime: <<EffectiveEchoTime>>
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MTS.*
    bids:
      <<: *anat_dicoment_vfamt
      suffix: MTS
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*MTR.*
    bids: &anat_dicoment_mtr            # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MTR
  - provenance:                         # ----------- Experimental CT support (see BEP024) -------------
    attributes: &ct_dicomattr           # An empty / non-matching reference dictionary that can be derefenced in other run-items of this data type
      Modality: CT
      ProtocolName:
      SeriesDescription:
      ImageType:
      PixelSpacing:
      Rows:
      Columns:
      SliceThickness:
    bids: &ct_dicoment_nonparametric
      acq: <SeriesDescription>          # This will be expanded by the bidsmapper (so the user can edit it in the bidseditor)
      ce:
      rec:
      run: <<>>                         # This will be updated dynamically during bidscoiner runtime (as it depends on the already existing files)
      suffix: ct
    meta:                               # This is an optional entry for meta-data that will be appended to the json sidecar files produced by dcm2niix

  func:       # ----------------------- All functional runs --------------------
  - provenance:                         # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = bold
    attributes: &func_dicomattr
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      EchoPulseSequence:                # Enhanced DICOM
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &func_dicoment_func           # See: schema/datatypes/func.yaml
      task: <ProtocolName>              # More consistent between SBREF and PHYSIO files
      acq:
      ce:
      dir:
      rec:
      run: <<>>
      echo:                             # Or use <EchoNumbers>
      part: ['', mag, phase, real, imag, 0]
      suffix: bold
    meta: &func_meta
      TaskName: <ProtocolName>
      B0FieldSource:
      B0FieldIdentifier:
  - provenance:                         # First match the SBREF bold runs (the normal bold runs don't have SBREF in the seriesdescription)
    attributes:
      <<: *func_dicomattr
      SeriesDescription: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*SBREF.*
    bids:
      <<: *func_dicoment_func
      suffix: sbref
    meta: *func_meta
  - provenance:                         # Then match the PHYSIO runs (the normal bold runs don't have PHYSIO in the seriesdescription)
    attributes:
      <<: *func_dicomattr
      ProtocolName: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*
      ImageType: .*'PHYSIO'.*
    bids: &func_dicoment_timeseries     # See: schema/datatypes/func.yaml
      task: <ProtocolName>
      acq:
      ce:
      dir:
      rec:
      recording:
      run: <<>>
      suffix: physio
    meta:
      TaskName: <ProtocolName>
  - provenance:
    attributes:
      <<: *func_dicomattr
      SeriesDescription: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*PHYSIO.*
    bids: *func_dicoment_timeseries
    meta: *func_meta
  - provenance:                         # Then catch the bold runs themselves
    attributes:
      <<: *func_dicomattr
      ProtocolName: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*
    bids: *func_dicoment_func
    meta: *func_meta
  - provenance:
    attributes:
      <<: *func_dicomattr
      ProtocolName: (?i).*(CBV|CerebralBloodVolume).*
    bids:
      <<: *func_dicoment_func
      suffix: cbv
    meta: *func_meta
  - provenance:
    attributes: *func_dicomattr
    bids: &func_dicoment_events         # See: schema/datatypes/func.yaml
      task: <SeriesDescription>         # NB: <ProtocolName> is consistent between SBREF and PHYSIO files but causes name clashes
      acq:
      ce:
      dir:
      rec:
      run: <<>>
      suffix: events
    meta:
      TaskName: <SeriesDescription>
  - provenance:
    attributes: *func_dicomattr
    bids:
      <<: *func_dicoment_timeseries
      suffix: stim
    meta:
      TaskName: <ProtocolName>

  perf:       # ----------------------- All perfusion runs ---------------------
  - provenance:
    attributes: &perf_dicomattr
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      EchoPulseSequence:                # Enhanced DICOM
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &perf_dicoment_group1         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      dir:
      run: <<>>
      suffix: asl
    meta: &perf_meta
      ArterialSpinLabelingType: "CASL / PCASL / PASL"
      PostLabelingDelay:
      BackgroundSuppression:
      M0Type: "Separate / Included / Estimate / Absent"
      RepetitionTimePreparation:
      VascularCrushing:
      AcquisitionVoxelSize:
      B0FieldSource:
      B0FieldIdentifier:
  - provenance:
    attributes:
      <<: *perf_dicomattr
      ProtocolName: (?i).*(ASL|Perfusion).*
    bids: *perf_dicoment_group1
    meta: *perf_meta
  - provenance:
    attributes:
      <<: *perf_dicomattr
      ProtocolName: (?i).*M0.?scan.*
    bids:
      <<: *perf_dicoment_group1
      suffix: m0scan
    meta: *perf_meta
  - provenance:
    attributes: *perf_dicomattr
    bids: &perf_dicoment_group2         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      dir:
      run: <<>>
      suffix: aslcontext
    meta: *perf_meta
  - provenance:
    attributes: *perf_dicomattr
    bids: &perf_dicoment_group3         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      run: <<>>
      suffix: asllabeling
    meta: *perf_meta
#  - provenance:
#    attributes: *perf_dicomattr
#    bids: &perf_dicoment_physio         # See: schema/datatypes/perf.yaml
#      acq: <ProtocolName>
#      rec:
#      task: <SeriesDescription>
#      recording:
#      dir:
#      run: <<>>
#      suffix: physio
#    meta: *perf_meta

  dwi:        # ----------------------- All diffusion runs ---------------------
  - provenance:                         # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = dwi
    attributes: &dwi_dicomattr
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      EchoPulseSequence:                # Enhanced DICOM
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &dwi_dicoment_DWI             # See: schema/datatypes/dwi.yaml
      acq: <ProtocolName>               # More consistent between SBREF and PHYSIO files
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: dwi
    meta: &dwi_meta
      B0FieldSource:
      B0FieldIdentifier:
  - provenance:                         # First match the SBREF dwi runs (the normal dwi runs don't have SBREF in the seriesdescription)
    attributes:
      <<: *dwi_dicomattr
      SeriesDescription: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*SBREF.*
    bids: &dwi_dicoment_sbref           # See: schema/datatypes/dwi.yaml
      acq: <SeriesDescription>
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: sbref
    meta: *dwi_meta
  - provenance:                         # Then match the PHYSIO runs (the normal bold runs don't have PHYSIO in the seriesdescription)
    attributes:
      <<: *dwi_dicomattr
      ProtocolName: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*
      ImageType: .*'PHYSIO'.*
    bids: &dwi_dicoment_physio          # See: schema/datatypes/dwi.yaml
      acq: <SeriesDescription>
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      recording:
      suffix: physio
  - provenance:
    attributes:
      <<: *dwi_dicomattr
      SeriesDescription: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*PHYSIO.*
    bids: *dwi_dicoment_physio
  - provenance:                         # Then catch the normal DWI runs
    attributes:
      <<: *dwi_dicomattr
      ProtocolName: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*
    bids: *dwi_dicoment_DWI
    meta: *dwi_meta
  - provenance:
    attributes:
      <<: *dwi_dicomattr
      ImageType: .*'DIFFUSION'.*
    bids: *dwi_dicoment_DWI
    meta: *dwi_meta

  fmap:       # ----------------------- All fieldmap runs ----------------------
  - provenance:                         # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = magnitude
    attributes: &fmap_dicomattr
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      EchoPulseSequence:                # Enhanced DICOM
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &fmap_dicoment_fieldmaps      # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      run: <<>>
      suffix: magnitude1
    meta: &fmap_meta
      B0FieldIdentifier:
      IntendedFor:
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
      EchoNumbers: '2'
      ImageType: .*'P'.*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phasediff
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
      EchoNumbers: '1'
      ImageType: .*'M'.*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude1
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
      EchoNumbers: '2'
      ImageType: .*'M'.*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude2
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
      EchoNumbers: '1'
      ImageType: .*'P'.*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phase1
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
      EchoNumbers: '2'
      ImageType: .*'P'.*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phase2
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: fieldmap
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(fmap|field.?map|B0.?map).*
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(inverted|pepolar|_inv).*
      ScanningSequence: EP
    bids: &fmap_dicoment_PEPolar        # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>          # NB: <ProtocolName> is consistent between SBREF and PHYSIO files but causes name clashes
      ce:
      dir:                              # <InPlanePhaseEncodingDirection> only gives COLUMN or ROW
      run: <<>>
      suffix: epi
    meta: *fmap_meta
  - provenance:                         # Siemens XA30 enhanced DICOM
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*(inverted|pepolar|_inv).*
      EchoPlanarPulseSequence: YES
    bids:
      <<: *fmap_dicoment_PEPolar
      suffix: epi
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids:
      <<: *fmap_dicoment_PEPolar
      suffix: m0scan
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1DAM         # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      flip:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1DAM
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1EPI         # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1EPI
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1AFI
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*B1.?map.*
      ImageType: .*FLIP ANGLE MAP.*
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml & https://bids-specification.readthedocs.io/en/stable/99-appendices/11-qmri.html#tb1tfl-and-tb1rfm-specific-notes
      acq: famp
      suffix: TB1TFL
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*B1map.*
      ImageType: .*'M'.*
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: anat
      suffix: TB1TFL
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*RF.?map.*
      ImageType: .*'M'.*
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: anat
      suffix: TB1RFM
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*RF.?map.*
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: famp
      suffix: TB1RFM
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      suffix: RB1COR
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1SRGE        # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1SRGE
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*B1.?map.*
      ImageType: .*FLIP ANGLE MAP.*
    bids: &fmap_dicoment_parametric     # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      suffix: TB1map
    meta: *fmap_meta
  - provenance:
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: (?i).*B1.?map.*
    bids:
      <<: *fmap_dicoment_parametric
      suffix: RB1map
    meta: *fmap_meta

  pet:        # ----------------------- All PET runs ---------------------------
  - provenance:
    attributes: &pet_dicomattr
      Modality: PT
      StudyDescription:
      SeriesDescription:
      SeriesType:
      Radiopharmaceutical:
      ReconstructionMethod:
      ImageType:
      NumberOfSlices:
      NumberOfTimeSlices:
      SliceThickness:
      PixelSpacing:
      Rows:
      Columns:
    bids: &pet_dicoment_pet             # See: schema/datatypes/pet.yaml
      task: <SeriesDescription>
      trc: <Radiopharmaceutical>
      rec: ['', acdyn, acstat, nacdyn, nacstat, 0]
      run: <<>>
      suffix: pet
    meta: &pet_meta
      TracerName: <<Radiopharmaceutical>>
      TracerRadionuclide:
      InjectedRadioactivity: <<RadionuclideTotalDose>>
      InjectedRadioactivityUnits:
      InjectedMass:
      InjectedMassUnits:
      ModeOfAdministration:
      SpecificRadioactivity:
      SpecificRadioactivityUnits:
      TimeZero: <<RadiopharmaceuticalStartTime>>
      InjectionStart: <<ContrastBolusStartTime>>
      FrameDuration: <<ActualFrameDuration>>
      Units:
  - provenance:
    attributes: *pet_dicomattr
    bids:
      <<: *pet_dicoment_pet
      suffix: events
    meta: *pet_meta
  - provenance:
    attributes: *pet_dicomattr
    bids:
      <<: *pet_dicoment_pet
      recording:
      suffix: blood
    meta: *pet_meta

  eeg:        # ----------------------- All EEG data ---------------------------
  - provenance:
    attributes:
      Modality: EEG
      ProtocolName:
      SeriesDescription:
    bids:                               # See: schema/datatypes/eeg.yaml
      acq: <ProtocolName>
      task: <SeriesDescription>
      run: <<>>
      suffix: eeg

  ieeg:       # ----------------------- All iEEG data --------------------------
  - provenance:
    attributes:
      Modality: EEG
      ProtocolName:
      SeriesDescription:
    bids:                               # See: schema/datatypes/ieeg.yaml
      acq: <ProtocolName>
      task: <SeriesDescription>
      run: <<>>
      suffix: ieeg

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    attributes: &extra_data_attributes_dicom
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &extra_data_bids_dicom
      acq: <ProtocolName>
      inv:
      rec:
      ce:
      task:
      echo: <EchoNumbers>
      dir:
      run: <<>>
      mod: <SeriesDescription>
      part: ['', mag, phase, real, imag, 0]
      suffix: <ScanningSequence>
  - provenance:
    attributes:
      <<: *anat_dicomattr
      ProtocolName: (?i).*TSE.*vfl.*
      ImageType: ((?!NORM).)*           # Make an exception for this non-NORM TSE T2w-image (i.e. ['ORIGINAL', 'PRIMARY', 'M', 'ND'], the filtered 'NORM' version is saved in 'anat')
    bids:
      <<: *anat_dicoment_nonparametric
      part: ['', mag, phase, real, imag, 0]
      suffix: T2w
  - provenance:                         # The last item, taken if nothing else matches
    attributes: *extra_data_attributes_dicom
    bids: *extra_data_bids_dicom

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    attributes: &leaveout_attributes_dicom
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirection:
    bids: &leaveout_bids_dicom
      acq: <ProtocolName>
      task: <SeriesDescription>
      echo: <EchoNumbers>
      suffix: <ScanningSequence>
  - provenance:
    attributes:
      <<: *leaveout_attributes_dicom
      ProtocolName: (?i).*(Scout|localizer|t2_haste_sag_ipat2).*
    bids: *leaveout_bids_dicom
  - provenance:
    attributes:
      <<: *leaveout_attributes_dicom
      ImageType: .*'CSA REPORT'.*
      ProtocolName: .*Phoenix.*
    bids:
      <<: *leaveout_bids_dicom
      rec: REPORT
  - provenance:
    attributes:
      <<: *leaveout_attributes_dicom
      ImageType: .*'DERIVED'.*
      ProtocolName: (?i)((?!MP2RAGE).)*     # Make an exception for DERIVED 3D MP2RAGE UNI-images
    bids:
      <<: *leaveout_bids_dicom
      rec: DERIVED


PAR:
# --------------------------------------------------------------------------------
# PAR key-value heuristics (Philips PAR fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>    # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  anat:       # ----------------------- All anatomical runs --------------------
  - provenance:                         # The fullpath name of the PAR file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    attributes: &anat_parattr
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &anat_parent_nonparametric    # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: T1w
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*(3DTFE|T1w).*
    bids: *anat_parent_nonparametric
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T2w.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: T2w
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*PDw.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: PDw
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T2star.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: T2starw
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*FLAIR.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: FLAIR
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*Inplane.?T1.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: inplaneT1
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*Inplane.?T2.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: inplaneT2
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*PDT2.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: PDT2
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*ANGIO.*
    bids:
      <<: *anat_parent_nonparametric
      suffix: angio
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T1.?map.*
    bids: &anat_parent_parametric       # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      suffix: T1map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T2.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: T2map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T2star.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: T2starmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*R1.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: R1map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*R2.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: R2map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*R2star.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: R2starmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*PD.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: PDmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MTR.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: MTRmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MT.?sat.*
    bids:
      <<: *anat_parent_parametric
      suffix: MTsat
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*3DTFE.*UNI.*
      MRAcquisitionType: 3D
    bids:
      <<: *anat_parent_parametric
      suffix: UNIT1
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*T1rho.*
    bids:
      <<: *anat_parent_parametric
      suffix: T1rho
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MWF.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: MWFmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MTV.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: MTVmap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*PDT2.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: PDT2map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*Chi.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: Chimap
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*S0.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: S0map
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*M0.?map.*
    bids:
      <<: *anat_parent_parametric
      suffix: M0map
  - provenance:
    attributes: *anat_parattr
    bids: &anat_parent_defacemask       # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      mod:
      suffix: defacemask
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*ME.?SE.*
    bids: &anat_parent_multiecho        # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      echo:
      part: ['', mag, phase, real, imag, 0]
      suffix: MESE
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*ME.?GRE.*
    bids:
      <<: *anat_parent_multiecho
      suffix: MEGRE
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*VFA.*
    bids: &anat_parent_multiflip        # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      echo:
      run: <<>>
      flip:
      part: ['', mag, phase, real, imag, 0]
      suffix: VFA
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*IR.?T1.*
    bids: &anat_parent_multiinv         # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      inv:
      part: ['', mag, phase, real, imag, 0]
      suffix: IRT1
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*3DTFE.*INV1.*
    bids: &anat_parent_mp2rage          # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      echo:
      flip:
      inv: 1
      part: ['', mag, phase, real, imag, 0]
      suffix: MP2RAGE
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*3DTFE.*INV2.*
    bids:
      <<: *anat_parent_mp2rage
      inv: 2
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MPM.*
    bids: &anat_parent_vfamt            # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      echo:
      flip:
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MPM
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MTS.*
    bids:
      <<: *anat_parent_vfamt
      suffix: MTS
  - provenance:
    attributes:
      <<: *anat_parattr
      protocol_name: (?i).*MTR.*
    bids: &anat_parent_mtr              # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce:
      rec: <exam_name>
      run: <<>>
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MTR

  func:       # ----------------------- All functional runs --------------------
  - provenance:
    attributes: &func_parattr
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &func_parent_func             # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce:
      dir:
      rec:
      run: <<>>
      echo:
      part: ['', mag, phase, real, imag, 0]
      suffix: bold
    meta:
      <<: *func_meta
      TaskName: <exam_name>
  - provenance:                         # First match the SBREF bold runs (the normal bold runs don't have SBREF in the seriesdescription)
    attributes:
      <<: *func_parattr
      protocol_name: (?i).*(f.?MRI|task|BOLD|func|rest|RSN).*SBREF.*
    bids:
      <<: *func_parent_func
      suffix: sbref
    meta: *func_meta
  - provenance:                         # Then catch the bold runs themselves
    attributes:
      <<: *func_parattr
      protocol_name: (?i).*(f.?MRI|task|BOLD|func|rest|RSN).*
    bids: *func_parent_func
    meta: *func_meta
  - provenance:
    attributes:
      <<: *func_parattr
      protocol_name: (?i).*(CBV|CerebralBloodVolume).*
    bids:
      <<: *func_parent_func
      suffix: cbv
    meta: *func_meta
  - provenance:
    attributes: *func_parattr
    bids: &func_parent_events           # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce:
      dir:
      rec:
      run: <<>>
      suffix: events
    meta:
      TaskName: <exam_name>
  - provenance:
    attributes: *func_parattr
    bids: &func_parent_timeseries       # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce:
      dir:
      rec:
      recording:
      run: <<>>
      suffix: physio
    meta:
      TaskName: <exam_name>
  - provenance:
    attributes: *func_parattr
    bids:
      <<: *func_parent_timeseries
      suffix: stim
    meta:
      TaskName: <exam_name>

  perf:       # ----------------------- All perfusion runs ---------------------
  - provenance:
    attributes: &perf_parattr
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &perf_parent_group1           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      dir:
      run: <<>>
      suffix: asl
    meta: *perf_meta
  - provenance:
    attributes:
      <<: *perf_parattr
      protocol_name: (?i).*(ASL|Perfusion).*
    bids: *perf_parent_group1
    meta: *perf_meta
  - provenance:
    attributes:
      <<: *perf_parattr
      protocol_name: (?i).*M0.?scan.*
    bids:
      <<: *perf_parent_group1
      suffix: m0scan
    meta: *perf_meta
  - provenance:
    attributes: *perf_parattr
    bids: &perf_parent_group2           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      dir:
      run: <<>>
      suffix: aslcontext
    meta: *perf_meta
  - provenance:
    attributes: *perf_parattr
    bids: &perf_parent_group3           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      run: <<>>
      suffix: asllabeling
    meta: *perf_meta

  dwi:        # ----------------------- All diffusion runs ---------------------
  - provenance:
    attributes: &dwi_parattr
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &dwi_parent_DWI               # See: schema/datatypes/dwi.yaml
      acq: <protocol_name>
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: dwi
    meta: *dwi_meta
  - provenance:                         # First match the SBREF dwi runs (the normal dwi runs don't have SBREF in the seriesdescription)
    attributes:
      <<: *dwi_parattr
      protocol_name: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*SBREF.*
    bids: &dwi_parent_sbref             # See: schema/datatypes/dwi.yaml
      acq: <protocol_name>
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: sbref
  - provenance:                         # Then catch the normal DWI runs
    attributes:
      <<: *dwi_parattr
      diffusion: '1'
    bids: *dwi_parent_DWI
    meta: *dwi_meta

  fmap:       # ----------------------- All fieldmap runs ----------------------
  - provenance:
    attributes: &fmap_parattr
      series_type:
      exam_name:
      protocol_name: (?i).*(fmap|field.?map|B0.?map).*
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &fmap_parent_fieldmaps        # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      run: <<>>
      suffix: magnitude1
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: magnitude2
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phasediff
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phase1
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phase2
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: fieldmap
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: magnitude
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_PEPolar          # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce:
      dir:
      run: <<>>
      suffix: epi
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_PEPolar
      suffix: m0scan
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1DAM           # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce:
      rec:
      flip:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1DAM
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1EPI           # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1EPI
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1AFI
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: TB1TFL
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: TB1RFM
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: RB1COR
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1SRGE          # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1SRGE
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids: &fmap_parent_parametric
      acq: <protocol_name>
      ce:
      rec:
      run: <<>>
      suffix: TB1map
    meta: *fmap_meta
  - provenance:
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_parametric
      suffix: RB1map
    meta: *fmap_meta

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    attributes:
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids:
      acq: <protocol_name><exam_name>
      inv:
      rec: <tech>
      ce:
      task:
      echo:
      dir:
      run: <<>>
      mod:
      part: ['', mag, phase, real, imag, 0]
      suffix: <exam_name>

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    attributes: &leaveout_attributes_par
      series_type:
      exam_name:
      protocol_name:
      tech:
      diffusion:
      fov:
      scan_resolution:
      scan_mode:
      max_slices:
      flow_compensation:
      max_echoes:
      repetition_time:
      prep_direction:
    bids: &leaveout_bids_par
      acq: <protocol_name><exam_name>
      suffix: <series_type>
  - provenance:
    attributes:
      <<: *leaveout_attributes_par
      protocol_name: (?i).*(Scout|localizer).*
    bids: *leaveout_bids_par


SPAR:
# ---------------------------------------------------------------------------------
# SPAR key-value heuristics (Philips MRS fields that are mapped to the BIDS labels)
# ---------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>    # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  mrs:        # ---------------------- All spectroscopy runs ------------------
  - provenance:                         # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    properties: *fileprop               # This is an optional (stub) entry of properties matching (could be added to any run-item)
    attributes: &mrs_sparattr           # The matching (regexp) criteria for the phys2bids -info data go in here
      examination_name:
      scan_id:
      echo_time:
      repetition_time:
      samples:
      averages:
      ap_size:
      lr_size:
      cc_size:
    bids: &mrs_sparent                  # See: https://docs.google.com/document/d/1pWCb02YNv5W-UZZja24fZrdXLm4X7knXMiZI7E2z7mY/
      task:
      acq:
      inv:
      nuc:
      vox:
      type:
      run: <<>>                         # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: press
    meta:                               # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    attributes: *mrs_sparattr
    bids: *mrs_sparent
    meta:

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    attributes: *mrs_sparattr
    bids: *mrs_sparent
    meta:


Twix:
# ---------------------------------------------------------------------------------
# Twix key-value heuristics (Siemens MRS fields that are mapped to the BIDS labels)
# ---------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  mrs:        # ---------------------- All spectroscopy runs ------------------
  - provenance:                         # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    properties: *fileprop               # This is an optional (stub) entry of properties matching (could be added to any run-item)
    attributes: &mrs_twixattr           # The matching (regexp) criteria for the phys2bids -info data go in here
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoNumbers:
      EchoTime:
      EffectiveEchoTime:
      RepetitionTime:
    bids: &mrs_twixent                  # See: https://docs.google.com/document/d/1pWCb02YNv5W-UZZja24fZrdXLm4X7knXMiZI7E2z7mY/
      task:
      acq:
      inv:
      nuc:
      vox:
      type:
      run: <<>>                         # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: mrs
    meta:                               # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix
  - provenance:
    attributes:
      <<: *mrs_twixattr
      SequenceName: .*
    bids:
      <<: *mrs_twixent
      suffix: press
    meta:

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    attributes: *mrs_twixattr
    bids: *mrs_twixent
    meta:

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    attributes: *mrs_twixattr
    bids: *mrs_twixent
    meta:


Pfile:
# ------------------------------------------------------------------------------
# P-file key-value heuristics (GE MRS fields that are mapped to the BIDS labels)
# ------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>    # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  mrs:        # ---------------------- All spectroscopy runs ------------------
  - provenance:                         # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    attributes: &mrs_p7attr             # The matching (regexp) criteria for spec2nii2bids go in here
      rhr_rh_logo:                      # INVALIDNMR
      rhr_rh_navs:                      # 8
      rhr_rh_nframes:                   # 14
      rhr_rh_frame_size:                # 4096
      rhr_rh_point_size:                # 4
      rhr_rh_da_xres:                   # 4096
      rhr_rh_da_yres:                   # 15
      rhr_spectral_width:               # 5000.0
      rhr_csi_dims:                     # 0
      rhr_xcsi:                         # 1
      rhr_ycsi:                         # 1
      rhr_zcsi:                         # 1
      rhr_roilenx:                      # 20.0
      rhr_roileny:                      # 20.0
      rhr_roilenz:                      # 20.0
      rhe_magstrength:                  # 30000
      rhs_se_desc:                      # PRESS ACC TE 30ms
      rhi_scanspacing:                  # 20.0
      rhi_nex:                          # 8.0
      rhi_tr:                           # 3000000
      rhi_ti:                           # 0
      rhi_te:                           # 30000
      rhi_mr_flip:                      # 90
      rhi_psdname:                      # PROBE-P
      rhi_cname:                        # 8HRBRAIN
    bids: &mrs_p7fileent                # See: https://docs.google.com/document/d/1pWCb02YNv5W-UZZja24fZrdXLm4X7knXMiZI7E2z7mY/
      task:
      acq:
      inv:
      nuc:
      vox:
      type:
      run: <<>>                         # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: mrs
    meta:                               # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix
  - provenance:                         # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    attributes:
      <<: *mrs_p7attr                   # The matching (regexp) criteria for spec2nii2bids go in here
      rhs_se_desc: .*PRESS.*
    bids:
      <<: *mrs_p7fileent                # See: https://docs.google.com/document/d/1pWCb02YNv5W-UZZja24fZrdXLm4X7knXMiZI7E2z7mY/
      suffix: press
    meta:                               # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    attributes: *mrs_p7attr
    bids: *mrs_p7fileent
    meta:

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    attributes: *mrs_p7attr
    bids: *mrs_p7fileent
    meta:


#Physio:
## --------------------------------------------------------------------------------
## Physio key-value heuristics (phys2bids -info data) that are mapped to the BIDS labels)
## --------------------------------------------------------------------------------
#  subject: <<filepath:/sub-(.*?)/>>    # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
#  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>
#
#  func:       # ----------------------- All functional runs --------------------
#  - provenance:                         # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
#    properties: *fileprop               # This is an optional (stub) entry of properties matching (could be added to any run-item)
#    attributes: &attributes_physio      # The matching (regexp) criteria for the phys2bids -info data go in here
#      ch_num:
#      filetype:
#      freq:
#      ch_name:
#      units:
#      trigger_idx:
#    bids: &bids_physio
#      task: <descrip>
#      acq:
#      ce:
#      dir:
#      rec:
#      run: <<>>                         # This will be updated during bidscoiner runtime (as it depends on the already existing files)
#      recording:
#      suffix: physio
#    meta:                               # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix
#      TriggerChannel: <<trigger_idx>>
#      ExpectedTimepoints: <<num_timepoints_found>>
#      Pad: 9
#      ChannelNames: <<ch_name>>
#      Threshold: <<thr>>
#      TimeOffset: <<time_offset>>
#      StartTime: <<time_offset>>
#
#  extra_data: # ----------------------- All extra data -------------------------
#  - provenance:
#    attributes: *attributes_physio
#    bids: *bids_physio
#    meta:
#
#  exclude:    # ----------------------- Data that will be left out -------------
#  - provenance:
#    attributes:
#      ch_num:
#      filetype:
#      freq:
#      ch_name:
#      units:
#      trigger_idx:
#    bids: *bids_physio
#    meta:


Nibabel:
# --------------------------------------------------------------------------------
# Nibabel key-value heuristics (header fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>    # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>     # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as session-label, e.g. <StudyID>

  anat:       # ----------------------- All anatomical runs --------------------
  - provenance:                         # The fullpath name of the DICOM file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    properties: *fileprop
    attributes: &nibattr                # An empty / non-matching reference dictionary that can be derefenced in other run-items of this data type
      dim:
      dim_info:
      pixdim:
#      descrip:                         # Unfortunately dcm2niix save the AcquisitionTime in here :-(
      intent_name:
      Modality:
      ProtocolName:
      SeriesDescription:
      ImageType:
      SequenceName:
      PulseSequenceName:
      SequenceVariant:
      ScanningSequence:
      MRAcquisitionType:
      SliceThickness:
      FlipAngle:
      EchoTime:
      RepetitionTime:
      InPlanePhaseEncodingDirectionDICOM:
    bids: &anat_nibent_nonparametric    # See: schema/datatypes/anat.yaml
      acq: <descrip>                    # This will be expanded by the bidsmapper (so the user can edit it)
      ce:
      rec:
      run: <<>>                         # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      part: ['', mag, phase, real, imag, 0]
      suffix: T1w
    meta:                               # This is an optional entry for meta-data that will be appended to the json sidecar files produced by dcm2niix
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(MPRAGE|T1w).*
    attributes: *nibattr
    bids: *anat_nibent_nonparametric
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T2w.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: T2w
  - provenance:
    properties:
      <<: *fileprop
      filename: .*PDw.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: PDw
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T2star.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: T2starw
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*FLAIR.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: FLAIR
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*Inplane.?T1.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: inplaneT1
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*Inplane.?T2.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: inplaneT2
  - provenance:
    properties:
      <<: *fileprop
      filename: .*PDT2.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: PDT2
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*ANGIO.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_nonparametric
      suffix: angio
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T1.?map.*
    attributes: *nibattr
    bids: &anat_nibent_parametric       # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      suffix: T1map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T2.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: T2map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T2star.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: T2starmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*R1.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: R1map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*R2.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: R2map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*R2star.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: R2starmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*PD.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: PDmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MTR.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: MTRmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MT.?sat.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: MTsat
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(MP2RAGE|UNIT1).*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: UNIT1
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*T1rho.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: T1rho
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MWF.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: MWFmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MTV.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: MTVmap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*PDT2.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: PDT2map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*Chi.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: Chimap
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*S0.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: S0map
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*M0.?map.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_parametric
      suffix: M0map
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &anat_nibent_defacemask       # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      mod:
      suffix: defacemask
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*ME.?SE.*
    attributes: *nibattr
    bids: &anat_nibent_multiecho        # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      echo:
      part: ['', mag, phase, real, imag, 0]
      suffix: MESE
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*ME.?GRE.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_multiecho
      suffix: MEGRE
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*VFA.*
    attributes: *nibattr
    bids: &anat_nibent_multiflip        # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      echo:
      run: <<>>
      flip:
      part: ['', mag, phase, real, imag, 0]
      suffix: VFA
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*IR.?T1.*
    attributes: *nibattr
    bids: &anat_nibent_multiinv         # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      inv:
      part: ['', mag, phase, real, imag, 0]
      suffix: IRT1
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(MP2RAGE|INV1).*
    attributes: *nibattr
    bids: &anat_nibent_mp2rage           # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      echo:
      flip:
      inv: 1
      part: ['', mag, phase, real, imag, 0]
      suffix: MP2RAGE
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(MP2RAGE|INV2).*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_mp2rage
      inv: 2
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MPM.*
    attributes: *nibattr
    bids: &anat_nibent_vfamt            # See: schema/datatypes/anat.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      echo:
      flip:
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MPM
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MTS.*
    attributes: *nibattr
    bids:
      <<: *anat_nibent_vfamt
      suffix: MTS
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*MTR.*
    attributes: *nibattr
    bids: &anat_nibent_mtr              # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce:
      rec:
      run: <<>>
      mt:
      part: ['', mag, phase, real, imag, 0]
      suffix: MTR

  func:       # ----------------------- All functional runs --------------------
  - provenance:                         # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = bold
    properties: *fileprop
    attributes: *nibattr
    bids: &func_nibent_func             # See: schema/datatypes/func.yaml
      task:
      acq: <descrip>
      ce:
      dir:
      rec:
      run: <<>>
      echo:
      part: ['', mag, phase, real, imag, 0]
      suffix: bold
    meta: *func_meta
  - provenance:                         # First match the SBREF bold runs (the normal bold runs won't have SBREF in the name)
    properties:
      <<: *fileprop
      filename: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*SBREF.*
    attributes: *nibattr
    bids:
      <<: *func_nibent_func
      suffix: sbref
    meta: *func_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &func_nibent_timeseries       # See: schema/datatypes/func.yaml
      task: <descrip>
      acq:
      ce:
      dir:
      rec:
      recording:
      run: <<>>
      suffix: physio
    meta:
      TaskName:
  - provenance:                         # Then catch the bold runs themselves
    properties:
      <<: *fileprop
      filename: (?i).*(f.?MRI|task|BOLD|func|rest|RSN|CMRR.*_TR).*
    attributes: *nibattr
    bids: *func_nibent_func
    meta: *func_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(CBV|CerebralBloodVolume).*
    attributes: *nibattr
    bids:
      <<: *func_nibent_func
      suffix: cbv
    meta: *func_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &func_nibent_events           # See: schema/datatypes/func.yaml
      task: <descrip>
      acq:
      ce:
      dir:
      rec:
      run: <<>>
      suffix: events
    meta:
      TaskName:
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids:
      <<: *func_nibent_timeseries
      suffix: stim
    meta:
      TaskName:

  perf:       # ----------------------- All perfusion runs ---------------------
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &perf_nibent_group1           # See: schema/datatypes/perf.yaml
      acq: <descrip>
      rec:
      dir:
      run: <<>>
      suffix: asl
    meta: *perf_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(ASL|Perfusion).*
    attributes: *nibattr
    bids: *perf_nibent_group1
    meta: *perf_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*M0.?scan.*
    attributes: *nibattr
    bids:
      <<: *perf_nibent_group1
      suffix: m0scan
    meta: *perf_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &perf_nibent_group2           # See: schema/datatypes/perf.yaml
      acq: <descrip>
      rec:
      dir:
      run: <<>>
      suffix: aslcontext
    meta: *perf_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &perf_nibent_group3           # See: schema/datatypes/perf.yaml
      acq: <descrip>
      rec:
      run: <<>>
      suffix: asllabeling
    meta: *perf_meta
#  - provenance:
#    properties: *fileprop
#    attributes: *nibattr
#    bids: &perf_nibent_physio           # See: schema/datatypes/perf.yaml
#      task: <descrip>
#      acq:
#      rec:
#      recording:
#      dir:
#      run: <<>>
#      suffix: physio
#    meta: *perf_meta

  dwi:        # ----------------------- All diffusion runs ---------------------
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &dwi_nibent_DWI               # See: schema/datatypes/dwi.yaml
      acq: <descrip>
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: dwi
    meta: *dwi_meta
  - provenance:                         # First catch the SBREF runs
    properties:
      <<: *fileprop
      filename: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*SBREF.*
    attributes: *nibattr
    bids: &dwi_nibent_sbref             # See: schema/datatypes/dwi.yaml
      acq: <descrip>
      rec:
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      suffix: sbref
    meta: *dwi_meta
  - provenance:                         # Then catch the normal DWI runs
    properties:
      <<: *fileprop
      filename: (?i).*(DWI|diffusion|HARDI|DTI|dMRI|DW.?MRI).*
    attributes: *nibattr
    bids: *dwi_nibent_DWI
    meta: *dwi_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids: &dwi_nibent_physio            # See: schema/datatypes/dwi.yaml
      acq: <descrip>
      dir:
      run: <<>>
      part: ['', mag, phase, real, imag, 0]
      recording:
      suffix: physio

  fmap:       # ----------------------- All fieldmap runs ----------------------
  - provenance:                         # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = magnitude
    properties:
      <<: *fileprop
      filename: (?i).*magnitude1.*
    attributes: *nibattr
    bids: &fmap_nibent_fieldmaps        # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      run: <<>>
      suffix: magnitude1
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*magnitude2.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: magnitude2
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*magnitude.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: magnitude
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(fmap|field.?map|B0.?map|phasediff).*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: phasediff
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(fmap|field.?map|B0.?map).*phase.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: phase1
    meta: *fmap_meta
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: phase2
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(fmap|field.?map|B0.?map).*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_fieldmaps
      suffix: fieldmap
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(inverted|pepolar|_inv).*
    attributes: *nibattr
    bids: &fmap_nibent_PEPolar          # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      dir:
      run: <<>>
      suffix: epi
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*m0scan.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_PEPolar
      suffix: m0scan
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1DAM.*
    attributes: *nibattr
    bids: &fmap_nibent_TB1DAM           # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      rec:
      flip:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1DAM
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1EPI.*
    attributes: *nibattr
    bids: &fmap_nibent_TB1EPI           # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1EPI
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1AFI.*
    attributes: *nibattr
    bids: &fmap_nibent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1AFI
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1TFL.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_RFFieldMaps     # See: schema/datatypes/fmap.yaml & https://bids-specification.readthedocs.io/en/stable/99-appendices/11-qmri.html#tb1tfl-and-tb1rfm-specific-notes
      acq: famp
      suffix: TB1TFL
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1RFM.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: anat
      suffix: TB1RFM
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*RB1COR.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      suffix: RB1COR
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*TB1SRGE.*
    attributes: *nibattr
    bids: &fmap_nibent_TB1SRGE        # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      rec:
      flip:
      echo:
      inv:
      part: ['', mag, phase, real, imag, 0]
      run: <<>>
      suffix: TB1SRGE
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i)(.*TB1.?|FLIP.?ANGLE)map.*
    attributes: *nibattr
    bids: &fmap_nibent_parametric     # See: schema/datatypes/fmap.yaml
      acq: <descrip>
      ce:
      rec:
      run: <<>>
      suffix: TB1map
    meta: *fmap_meta
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*RB1.?map.*
    attributes: *nibattr
    bids:
      <<: *fmap_nibent_parametric
      suffix: RB1map
    meta: *fmap_meta

  extra_data: # ----------------------- All extra data -------------------------
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids:
      acq: <descrip>
      inv:
      rec:
      ce:
      task:
      echo:
      dir:
      run: <<>>
      mod:
      part: ['', mag, phase, real, imag, 0]
      suffix:

  exclude:    # ----------------------- Data that will be left out -------------
  - provenance:
    properties: *fileprop
    attributes: *nibattr
    bids:
      acq: <ProtocolName>
      rec: <descrip><ImageType>
      task: <SeriesDescription>
      echo: <EchoNumbers>
      suffix: <ScanningSequence>
  - provenance:
    properties:
      <<: *fileprop
      filename: (?i).*(Scout|localizer|t2_haste_sag_ipat2).*
    attributes: *nibattr
    bids:
      acq: <ProtocolName>
      rec: <descrip><ImageType>
      task: <SeriesDescription>
      echo: <EchoNumbers>
      suffix: <ScanningSequence>

ECAT:
# --------------------------------------------------------------------------------
# We use this to catalog ECAT files if they are preset
# --------------------------------------------------------------------------------
  subject: <<filepath:/sub-(.*?)/>>   # This filesystem property extracts the subject label from the source directory. NB: Any property or attribute can be used as subject-label, e.g. <PatientID>
  session: <<filepath:/sub-.*?/ses-(.*?)/>>

  pet: # ----------------------- All PET runs ---------------------------
    - provenance:
      attributes: &ecat_attr
        somexlsfields:
      bids: *pet_dicoment_pet             # See: schema/datatypes/pet.yaml
      meta: *pet_meta
    - provenance:
      attributes: *ecat_attr
      bids:
        <<: *pet_dicoment_pet
        suffix: events
      meta: *pet_meta
    - provenance:
      attributes: *ecat_attr
      bids:
        << : *pet_dicoment_pet
        recording:
        suffix: blood
      meta: *pet_meta
