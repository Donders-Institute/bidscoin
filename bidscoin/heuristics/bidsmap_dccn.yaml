# --------------------------------------------------------------------------------
# This is a bidsmap YAML file with the key-value mappings for the different BIDS
# datatypes (anat, func, dwi, etc). The datatype attributes are the keys that map
# onto the BIDS labels. The bidsmap data-structure should be 5 levels deep:
# dict > dict > list > dict > dict
#
# NB:
# 1) Edit the bidsmap file to your needs before feeding it to bidscoiner.py
# 2) (Institute) users may create their own bidsmap_[template].yaml or
#    bidsmap_[sample].yaml file
#
# For more information, see:
# https://github.com/Donders-Institute/bidscoin
# https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
# --------------------------------------------------------------------------------


Options:
# --------------------------------------------------------------------------------
# General options
# --------------------------------------------------------------------------------
  bidscoin:
    version: '3.5.3'              # BIDScoin version (should correspond with the version in ../bidscoin/version.txt)
    bidsignore: extra_data/       # Semicolon-separated list of entries that are added to the .bidsignore file (for more info, see BIDS specifications), e.g. extra_data/;pet/;myfile.txt;yourfile.csv
  dcm2niix:                       # See dcm2niix -h and https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#General_Usage for more info
    path: module add dcm2niix;    # Command to set the path to dcm2niix (note the semi-colon), e.g. module add dcm2niix/1.0.20180622; or PATH=/opt/dcm2niix/bin:$PATH; or /opt/dcm2niix/bin/ or '"C:\Program Files\dcm2niix\"' (note the quotes to deal with the whitespace)
    args: -b y -z y -i n          # Argument string that is passed to dcm2niix. Tip: SPM users may want to use '-z n' (which produces unzipped nifti's, see dcm2niix -h for more information)


PlugIns:
# --------------------------------------------------------------------------------
# List of plugins to edit the key-value heuristics / perform additional operations
# --------------------------------------------------------------------------------
- README.py                       # Located in the default search path: bidscoin/plugins/


DICOM:
# --------------------------------------------------------------------------------
# DICOM key-value heuristics (DICOM fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<SourceFilePath>>     # <<SourceFilePath>> extracts the subject label from the source directory during bidscoiner runtime. A DICOM attribute can also be used as subject-label instead, e.g. <PatientID>
  session: <<SourceFilePath>>     # <<SourceFilePath>> extracts the session label from the source directory during bidscoiner runtime. A DICOM attribute can also be used as session-label instead, e.g. <StudyID>

  anat:       # ----------------------- All anatomical runs --------------------
  - provenance: ~                 # The fullpath name of the DICOM file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    attributes: &anat_dicomattr
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &anat_dicoment_nonparametric  # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: T1w
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*mprage*', '*MPRAGE*', '*MPRage*', '*t1w*', '*T1W*', '*T1w*', '*T1*']
      MRAcquisitionType: 3D
    bids: *anat_dicoment_nonparametric
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*t2w*', '*T2w*', '*T2W*', '*T2*']
      SequenceVariant: "['SK', 'SP']"
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2w
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: '*tse*vfl*'
      ImageType: NORM                   # NB: The non-NORM image is saved in 'extra_data'
      SequenceVariant: "['SK', 'SP']"
      ScanningSequence: SE
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2w
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*PDw*', '*pdw*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: PDw
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*t2star*', '*T2star*', '*T2STAR*', '*T2Star*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: T2starw
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      ScanningSequence: "['SE', 'IR']"
      SeriesDescription: ['*FLAIR*', '*flair*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: FLAIR
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*InplaneT1*', '*inplaneT1*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: inplaneT1
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*InplaneT2*', '*inplaneT2*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: inplaneT2
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*PDT2*', '*PDt2*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: PDT2
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*angio*', '*Angio*', '*ANGIO*']
    bids:
      <<: *anat_dicoment_nonparametric
      suffix: angio
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*T1map*', '*T1Map*', '*t1map*', '*t1Map*']
    bids: &anat_dicoment_parametric     # See: schema/datatypes/anat.yaml
      acq: <ProtocolName>
      ce: ~
      rec: ~
      run: <<1>>
      suffix: T1map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*T2map*', '*T2Map*', '*t2map*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: T2map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*T2starmap*', '*T2StarMap*', '*t2starmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: T2starmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*R1map*', '*R1Map*', '*r1map*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: R1map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*R2map*', '*R2Map*', '*r2map*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: R2map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*R2starmap*', '*R2StarMap*', '*r2starmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: R2starmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*PDMap*', '*PDmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: PDmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MTRMap*', '*MTRmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTRmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MTSat*', '*MTsat*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTsat
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*mp2rage*UNI*', '*MP2RAGE*UNI*', '*MP2Rage*UNI*', '*mp2rage*uni*', '*MP2RAGE*uni*', '*MP2Rage*uni*']
      MRAcquisitionType: 3D
    bids:
      <<: *anat_dicoment_parametric
      suffix: UNIT1
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*T1rho*', '*T1Rho*', '*t1rho*', '*t1Rho*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: T1rho
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MWFMap*', '*MWFmap*', '*mwfmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: MWFmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MTVMap*', '*MTVmap*', '*mtvmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: MTVmap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*PDT2Map*', '*PDT2map*', '*mwfmap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: PDT2map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*ChiMap*', '*Chimap*', '*chimap*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: Chimap
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*S0Map*', '*Somap*', '*s0map*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: S0map
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*M0Map*', '*Momap*', '*m0map*']
    bids:
      <<: *anat_dicoment_parametric
      suffix: M0map
  - provenance: ~
    attributes: *anat_dicomattr
    bids: &anat_dicoment_defacemask     # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      mod: ~
      suffix: defacemask
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MESE*', '*mese*']
    bids: &anat_dicoment_multiecho      # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      echo: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MESE
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MEGRE*', '*megre*']
    bids:
      <<: *anat_dicoment_multiecho
      suffix: MEGRE
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*VFA*', '*vfa*']
    bids: &anat_dicoment_multiflip      # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      flip: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: VFA
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*IRT1*', '*irt1*']
    bids: &anat_dicoment_multiinv       # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: IRT1
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*mp2rage*INV1*', '*MP2RAGE*INV1*', '*MP2Rage*INV1*', '*mp2rage*inv1*', '*MP2RAGE*inv1*', '*MP2Rage*inv1*']
      MRAcquisitionType: 3D
    bids: &anat_dicoment_mp2rage        # See: schema/datatypes/anat.yaml
      acq: <ProtocolName>
      ce: ~
      rec: ~
      run: <<1>>
      echo: ~
      flip: ~
      inv: 1
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MP2RAGE
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*mp2rage*INV2*', '*MP2RAGE*INV2*', '*MP2Rage*INV2*', '*mp2rage*inv2*', '*MP2RAGE*inv2*', '*MP2Rage*inv2*']
      MRAcquisitionType: 3D
    bids:
      <<: *anat_dicoment_mp2rage
      inv: 2
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MPM*', '*mpm*']
    bids: &anat_dicoment_vfamt          # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      echo: ~
      flip: ~
      mt: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MPM
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MTS*', '*mts*']
    bids:
      <<: *anat_dicoment_vfamt
      suffix: MTS
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: ['*MTR*', '*mtr*']
    bids: &anat_dicoment_mtr            # See: schema/datatypes/anat.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      mt: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MTR

  func:       # ----------------------- All functional runs --------------------
  - provenance: ~
    attributes: &func_dicomattr   # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = bold
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &func_dicoment_func           # See: schema/datatypes/func.yaml
      task: <ProtocolName>              # More consistent between SBREF and PHYSIO files
      acq: ~
      ce: ~
      dir: ~
      rec: ~
      run: <<1>>
      echo: <EchoNumbers>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: bold
  - provenance: ~
    attributes:                         # First match the SBREF bold runs (the normal bold runs don't have SBREF in the seriesdescription)
      <<: *func_dicomattr
      ProtocolName: ['*fmri*', '*fMRI*', '*FMRI*', '*task*', '*Task*', '*bold*', '*BOLD*']
      SeriesDescription: ['*sbref*', '*SBRef*', '*SBREF*']
    bids:
      <<: *func_dicoment_func
      suffix: sbref
  - provenance: ~
    attributes:
      <<: *func_dicomattr
      ProtocolName: '*cmrr_*_m*_TR*'
      ScanningSequence: EP
      SeriesDescription: ['*sbref*', '*SBRef*', '*SBREF*']
    bids:
      <<: *func_dicoment_func
      suffix: sbref
  - provenance: ~
    attributes:                         # Then match the PHYSIO runs (the normal bold runs don't have PHYSIO in the seriesdescription)
      <<: *func_dicomattr
      ProtocolName: ['*fmri*', '*fMRI*', '*FMRI*', '*task*', '*Task*', '*bold*', '*BOLD*']
      ImageType: PHYSIO
    bids: &func_dicoment_timeseries     # See: schema/datatypes/func.yaml
      task: <ProtocolName>
      acq: ~
      ce: ~
      dir: ~
      rec: ~
      recording: ~
      run: <<1>>
      suffix: physio
  - provenance: ~
    attributes:
      <<: *func_dicomattr
      SeriesDescription: ['*fmri*Physio*', '*fMRI*Physio*', '*FMRI*Physio*', '*task*Physio*', '*Task*Physio*', '*bold*Physio*', '*BOLD*Physio*']
    bids: *func_dicoment_timeseries
  - provenance: ~
    attributes:                         # Then catch the bold runs themselves
      <<: *func_dicomattr
      ProtocolName: ['*fmri*', '*fMRI*', '*FMRI*', '*task*', '*Task*', '*bold*', '*BOLD*']
    bids: *func_dicoment_func
  - provenance: ~
    attributes:
      <<: *func_dicomattr
      ProtocolName: '*cmrr_*_m*_TR*'
      ScanningSequence: EP
    bids: *func_dicoment_func
  - provenance: ~
    attributes:
      <<: *func_dicomattr
      ProtocolName: ['*CBV*', '*CerebralBloodVolume*']
    bids:
      <<: *func_dicoment_func
      suffix: cbv
  - provenance: ~
    attributes: *func_dicomattr
    bids: &func_dicoment_events         # See: schema/datatypes/func.yaml
      task: <SeriesDescription>         # NB: <ProtocolName> is consistent between SBREF and PHYSIO files but causes name clashes
      acq: ~
      ce: ~
      dir: ~
      rec: ~
      run: <<1>>
      suffix: events
  - provenance: ~
    attributes: *func_dicomattr
    bids:
      <<: *func_dicoment_timeseries
      suffix: stim

  perf:       # ----------------------- All perfusion runs ---------------------
  - provenance: ~
    attributes: &perf_dicomattr
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &perf_dicoment_group1         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      dir: ~
      run: <<1>>
      suffix: asl
  - provenance: ~
    attributes:
      <<: *perf_dicomattr
      ProtocolName: [ '*ASL*', '*Perfusion*', '*perfusion*' ]
    bids: *perf_dicoment_group1
  - provenance: ~
    attributes:
      <<: *perf_dicomattr
      ProtocolName: ['*M0Scan*', '*m0scan*']
    bids:
      <<: *perf_dicoment_group1
      suffix: m0scan
  - provenance: ~
    attributes: *perf_dicomattr
    bids: &perf_dicoment_group2         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      dir: ~
      run: <<1>>
      suffix: aslcontext
  - provenance: ~
    attributes: *perf_dicomattr
    bids: &perf_dicoment_group3         # See: schema/datatypes/perf.yaml
      acq: <ProtocolName>
      rec: <SeriesDescription>
      run: <<1>>
      suffix: asllabeling

  dwi:        # ----------------------- All diffusion runs ---------------------
  - provenance: ~
    attributes: &dwi_dicomattr    # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = dwi
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &dwi_dicoment_DWI             # See: schema/datatypes/dwi.yaml
      acq: <ProtocolName>               # More consistent between SBREF and PHYSIO files
      dir: ~
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: dwi
  - provenance: ~
    attributes:                         # First match the SBREF dwi runs (the normal dwi runs don't have SBREF in the seriesdescription)
      <<:  *dwi_dicomattr
      ProtocolName: ['*dwi*', '*DWI*', '*diffusion*', '*DIFFUSION*', '*dti*', '*DTI*']
      SeriesDescription: ['*sbref*', '*SBRef*', '*SBREF*']
    bids: &dwi_dicoment_sbref           # See: schema/datatypes/dwi.yaml
      acq: <SeriesDescription>
      dir: ~
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: sbref
  - provenance: ~
    attributes:                         # Then match the PHYSIO runs (the normal bold runs don't have PHYSIO in the seriesdescription)
      <<: *dwi_dicomattr
      ProtocolName: ['*dwi*', '*DWI*', '*diffusion*', '*DIFFUSION*', '*dti*', '*DTI*']
      ImageType: PHYSIO
    bids: &dwi_dicoment_physio          # Not (yet) in: schema/datatypes/dwi.yaml
      acq: <SeriesDescription>
      dir: ~
      run: <<1>>
      suffix: physio
  - provenance: ~
    attributes:
      <<: *dwi_dicomattr
      SeriesDescription: ['*dwi*Physio*', '*DWI*Physio*', '*diffusion*Physio*', '*DIFFUSION*Physio*', '*dti*Physio*', '*DTI*Physio*']
    bids: *dwi_dicoment_physio
  - provenance: ~
    attributes:                         # Then catch the normal DWI runs
      <<: *dwi_dicomattr
      ProtocolName: ['*dwi*', '*DWI*', '*diffusion*', '*DIFFUSION*', '*dti*', '*DTI*']
    bids: *dwi_dicoment_DWI
  - provenance: ~
    attributes:
      <<: *dwi_dicomattr
      ImageType: DIFFUSION
    bids: *dwi_dicoment_DWI

  fmap:       # ----------------------- All fieldmap runs ----------------------
  - provenance: ~
    attributes: &fmap_dicomattr   # The first item with empty attributes will not match anything but is used by default when changing datatype in the bidseditor GUI -> suffix = magnitude
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &fmap_dicoment_fieldmaps      # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      run: <<1>>
      suffix: magnitude1
      IntendedFor: ~
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      EchoNumbers: 2
      ImageType: P
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phasediff
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      EchoNumbers: 1
      ImageType: M
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude1
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      EchoNumbers: 2
      ImageType: M
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude2
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      EchoNumbers: 1
      ImageType: P
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phase1
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      EchoNumbers: 2
      ImageType: P
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: phase2
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: fieldmap
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
    bids:
      <<: *fmap_dicoment_fieldmaps
      suffix: magnitude
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      ProtocolName: ['*inverted*', '*pepolar*', '*_inv']
      ScanningSequence: EP
    bids: &fmap_dicoment_PEPolar        # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>          # NB: <ProtocolName> is consistent between SBREF and PHYSIO files but causes name clashes
      ce: ~
      dir: <InPlanePhaseEncodingDirection>
      run: <<1>>
      suffix: epi
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_dicomattr
    bids:
      <<: *fmap_dicoment_PEPolar
      suffix: m0scan
  - provenance: ~
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1DAM         # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      flip: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1DAM
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1EPI         # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1EPI
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1AFI
      IntendedFor: ~
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*b1map*', '*B1map*']
      SequenceName: '*tfl*'
      ImageType: 'FLIP ANGLE MAP'
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml & https://bids-specification.readthedocs.io/en/stable/99-appendices/11-qmri.html#tb1tfl-and-tb1rfm-specific-notes
      acq: famp
      suffix: TB1TFL
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*b1map*', '*B1map*']
      SequenceName: '*tfl*'
      ImageType: M
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: anat
      suffix: TB1TFL
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*rf*map*', '*RF*map*']
      ImageType: M
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: anat
      suffix: TB1RFM
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*rf*map*', '*RF*map*']
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      acq: famp
      suffix: TB1RFM
  - provenance: ~
    attributes: *fmap_dicomattr
    bids:
      <<: *fmap_dicoment_RFFieldMaps    # See: schema/datatypes/fmap.yaml
      suffix: RB1COR
  - provenance: ~
    attributes: *fmap_dicomattr
    bids: &fmap_dicoment_TB1SRGE        # See: schema/datatypes/fmap.yaml
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1SRGE
      IntendedFor: ~
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*b1map*', '*B1map*']
      ImageType: 'FLIP ANGLE MAP'
    bids: &fmap_dicoment_parametric
      acq: <SeriesDescription>
      ce: ~
      rec: ~
      run: <<1>>
      suffix: TB1map
      IntendedFor: ~
  - provenance: ~
    attributes:
      <<: *fmap_dicomattr
      SeriesDescription: ['*b1map*', '*B1map*']
    bids:
      <<: *fmap_dicoment_parametric
      suffix: RB1map

  eeg:  # ----------------------- All EEG data ---------------------------
  - provenance: ~
    attributes:
      Modality: EEG
      ProtocolName: ~
      SeriesDescription: ~
    bids:                               # See: schema/datatypes/eeg.yaml
      acq: <ProtocolName>
      task: <SeriesDescription>
      run: <<1>>
      suffix: eeg

  ieeg:       # ----------------------- All iEEG data --------------------------
  - provenance: ~
    attributes:
      Modality: EEG
      ProtocolName: ~
      SeriesDescription: ~
    bids:                               # See: schema/datatypes/ieeg.yaml
      acq: <ProtocolName>
      task: <SeriesDescription>
      run: <<1>>
      suffix: ieeg

  beh:        # ----------------------- All behavioural data -------------------
  - provenance: ~
    attributes: &beh_dicomattr
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
    bids: &beh_dicoment_group1          # See: schema/datatypes/beh.yaml
      task: <SeriesDescription>
      acq: ~
      recording: ~
      run: ~
      suffix: physio
  - provenance: ~
    attributes: *beh_dicomattr
    bids:
      <<: *beh_dicoment_group1
      suffix: stim
  - provenance: ~
    attributes: *beh_dicomattr
    bids: &beh_dicoment_group2          # See: schema/datatypes/beh.yaml
      task: <SeriesDescription>
      acq: ~
      run: ~
      suffix: events
  - provenance: ~
    attributes: *beh_dicomattr
    bids:
      <<: *beh_dicoment_group2
      suffix: beh

  pet:        # ----------------------- All PET runs ---------------------------
  - provenance: ~
    attributes: &pet_dicomattr
      Modality: PT
      SeriesDescription: ~
      Radiopharmaceutical: ~
      ImageType: ~
      SliceThickness: ~
      PixelSpacing: ~
      Rows: ~
      Columns: ~
    bids: &pet_dicoment_group1
      task: <SeriesDescription>
      acq: <Radiopharmaceutical>
      rec: ['', 'acdyn', 'acstat', 'nacdyn', 'nacstat', 0]
      run: <<1>>
      suffix: pet

  extra_data: # ----------------------- All extra data -------------------------
  - provenance: ~
    attributes: &extra_data_attributes_dicom
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids:
      acq: <ProtocolName>
      inv: ~
      rec: <MRAcquisitionType><ImageType>
      ce: ~
      task: ~
      echo: <EchoNumbers>
      dir: ~
      run: <<1>>
      mod: <SeriesDescription>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: <ScanningSequence>
  - provenance: ~
    attributes:
      <<: *anat_dicomattr
      SeriesDescription: '*tse*vfl*'
      ImageType: ~                      # Make an exception for this non-NORM TSE T2w-image (i.e. ['ORIGINAL', 'PRIMARY', 'M', 'ND'], the filtered 'NORM' version is saved in 'anat')
      SequenceVariant: "['SK', 'SP']"
      ScanningSequence: SE
    bids:
      <<: *anat_dicoment_nonparametric
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: T2w
  - provenance: ~                       # The last item, taken if nothing else matches
    attributes:
      <<: *extra_data_attributes_dicom
    bids:
      acq: <ProtocolName>
      rec: <MRAcquisitionType><ImageType>
      ce: ~
      task: ~
      echo: <EchoNumbers>
      dir: ~
      run: <<1>>
      mod: <SeriesDescription>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: <ScanningSequence>

  leave_out:  # ----------------------- Data that will be left out -------------
  - provenance: ~
    attributes: &leaveout_attributes_dicom
      Modality: ~
      ProtocolName: ~
      SeriesDescription: ~
      ImageType: ~
      SequenceName: ~
      SequenceVariant: ~
      ScanningSequence: ~
      MRAcquisitionType: ~
      SliceThickness: ~
      FlipAngle: ~
      EchoNumbers: ~
      EchoTime: ~
      RepetitionTime: ~
      PhaseEncodingDirection: ~
    bids: &leaveout_bids_dicom
      acq: <ProtocolName>
      rec: <ImageType>
      task: <SeriesDescription>
      echo: <EchoNumbers>
      mod: <MRAcquisitionType>
      suffix: <ScanningSequence>
  - provenance: ~
    attributes:
      <<: *leaveout_attributes_dicom
      ProtocolName: ['*Scout*', '*scout*', '*localizer*', '*Localizer*', 't2_haste_sag_ipat2']
    bids: *leaveout_bids_dicom
  - provenance: ~
    attributes:
      <<: *leaveout_attributes_dicom
      ImageType: DERIVED
      MRAcquisitionType: 2D             # Make an exception for DERIVED 3D MP2RAGE UNI-images
    bids:
      <<: *leaveout_bids_dicom
      rec: DERIVED


PAR:
# --------------------------------------------------------------------------------
# PAR key-value heuristics (Philips PAR fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<SourceFilePath>>     # <<SourceFilePath>> extracts the subject label from the source directory during bidscoiner runtime. A DICOM attribute can also be used as subject-label instead, e.g. <PatientID>
  session: <<SourceFilePath>>     # <<SourceFilePath>> extracts the session label from the source directory during bidscoiner runtime. A DICOM attribute can also be used as session-label instead, e.g. <StudyID>
  anat:       # ----------------------- All anatomical runs --------------------
  - provenance: ~                 # The fullpath name of the DICOM file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    attributes: &anat_parattr
      series_type: ~
      exam_name: ~
      protocol_name: ~
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids: &anat_parent_nonparametric    # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: T1w
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*t1w*', '*T1w*', '*T1W*', '*T1*', '3DTFE']
    bids: *anat_parent_nonparametric
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*t2w*', '*T2w*', '*T2W*', '*T2*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: T2w
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*PDw*', '*pdw*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: PDw
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*t2star*', '*T2star*', '*T2STAR*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: T2starw
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*FLAIR*', '*flair*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: FLAIR
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*inplaneT1*', '*InplaneT1*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: inplaneT1
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*inplaneT2*', '*InplaneT2*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: inplaneT2
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*PDT2*', '*PDt2*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: PDT2
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*angio*', '*Angio*', '*ANGIO*']
    bids:
      <<: *anat_parent_nonparametric
      suffix: angio
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*T1map*', '*T1Map*', '*t1map*']
    bids: &anat_parent_parametric       # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      suffix: T1map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*T2map*', '*T2Map*', '*t2map*']
    bids:
      <<: *anat_parent_parametric
      suffix: T2map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*T2starmap*', '*T2StarMap*', '*t2starmap*']
    bids:
      <<: *anat_parent_parametric
      suffix: T2starmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*R1map*', '*R1Map*', '*r1map*']
    bids:
      <<: *anat_parent_parametric
      suffix: R1map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*R2map*', '*R2Map*', '*r2map*']
    bids:
      <<: *anat_parent_parametric
      suffix: R2map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*R2starmap*', '*R2StarMap*', '*r2starmap*']
    bids:
      <<: *anat_parent_parametric
      suffix: R2starmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*PDmap*', '*PDMap*']
    bids:
      <<: *anat_parent_parametric
      suffix: PDmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MTRmap*', '*MTRMap*']
    bids:
      <<: *anat_parent_parametric
      suffix: MTRmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MTSat*', '*MTsat*']
    bids:
      <<: *anat_parent_parametric
      suffix: MTsat
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*3DTFE*UNI*', '*3DTFE*uni*', '*3dtfe*uni*']
      MRAcquisitionType: 3D
    bids:
      <<: *anat_parent_parametric
      suffix: UNIT1
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*T1rho*', '*T1Rho*', '*t1rho*', '*t1Rho*']
    bids:
      <<: *anat_parent_parametric
      suffix: T1rho
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MWFMap*', '*MWFmap*', '*mwfmap*']
    bids:
      <<: *anat_parent_parametric
      suffix: MWFmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MTVMap*', '*MTVmap*', '*mtvmap*']
    bids:
      <<: *anat_parent_parametric
      suffix: MTVmap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*PDT2Map*', '*PDT2map*', '*pdt2map*']
    bids:
      <<: *anat_parent_parametric
      suffix: PDT2map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*ChiMap*', '*Chimap*', '*chimap*']
    bids:
      <<: *anat_parent_parametric
      suffix: Chimap
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*S0Map*', '*Somap*', '*s0map*']
    bids:
      <<: *anat_parent_parametric
      suffix: S0map
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*M0Map*', '*Momap*', '*m0map*']
    bids:
      <<: *anat_parent_parametric
      suffix: M0map
  - provenance: ~
    attributes: *anat_parattr
    bids: &anat_parent_defacemask       # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      mod: ~
      suffix: defacemask
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MESE*', '*mese*']
    bids: &anat_parent_multiecho        # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      echo: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MESE
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MEGRE*', '*megre*']
    bids:
      <<: *anat_parent_multiecho
      suffix: MEGRE
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*VFA*', '*vfa*']
    bids: &anat_parent_multiflip        # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      flip: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: VFA
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*IRT1*', '*irt1*']
    bids: &anat_parent_multiinv         # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: IRT1
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*3DTFE*INV1*', '*3DTFE*inv1*', '*3dtfe*inv1*']
    bids: &anat_parent_mp2rage          # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      echo: ~
      flip: ~
      inv: 1
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MP2RAGE
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*3DTFE*INV2*', '*3DTFE*inv2*', '*3dtfe*inv2*']
    bids:
      <<: *anat_parent_mp2rage
      inv: 2
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MPM*', '*mpm*']
    bids: &anat_parent_vfamt            # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      echo: ~
      flip: ~
      mt: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MPM
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MTS*', '*mts*']
    bids:
      <<: *anat_parent_vfamt
      suffix: MTS
  - provenance: ~
    attributes:
      <<: *anat_parattr
      protocol_name: ['*MTR*', '*mtr*']
    bids: &anat_parent_mtr              # See: schema/datatypes/anat.yaml
      acq: <protocol_name>
      ce: ~
      rec: <exam_name>
      run: <<1>>
      mt: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: MTR

  func:       # ----------------------- All functional runs --------------------
  - provenance: ~
    attributes: &func_parattr
      series_type: ~
      exam_name: ~
      protocol_name: ~
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids: &func_parent_func             # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce: ~
      dir: ~
      rec: ~
      run: <<1>>
      echo: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: bold
  - provenance: ~
    attributes:                         # First match the SBREF bold runs (the normal bold runs don't have SBREF in the seriesdescription)
      <<: *func_parattr
      protocol_name: ['*fMRI*SBREF*', '*fMRI*sbref*', '*fMRI*SBRef*']
    bids:
      <<: *func_parent_func
      suffix: sbref
  - provenance: ~
    attributes:                         # Then catch the bold runs themselves
      <<: *func_parattr
      protocol_name: ['*fmri*', '*fMRI*', '*FMRI*', '*task*', '*Task*', '*bold*', '*BOLD*']
    bids: *func_parent_func
  - provenance: ~
    attributes:
      <<: *func_parattr
      protocol_name: ['*CBV*', '*CerebralBloodVolume*']
    bids:
      <<: *func_parent_func
      suffix: cbv
  - provenance: ~
    attributes: *func_parattr
    bids: &func_parent_events           # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce: ~
      dir: ~
      rec: ~
      run: <<1>>
      suffix: events
  - provenance: ~
    attributes: *func_parattr
    bids: &func_parent_timeseries       # See: schema/datatypes/func.yaml
      task: <exam_name>
      acq: <protocol_name>
      ce: ~
      dir: ~
      rec: ~
      recording: ~
      run: <<1>>
      suffix: physio
  - provenance: ~
    attributes: *func_parattr
    bids:
      <<: *func_parent_timeseries
      suffix: stim

  perf:       # ----------------------- All perfusion runs ---------------------
  - provenance: ~
    attributes: &perf_parattr
      series_type: ~
      exam_name: ~
      protocol_name: ~
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids: &perf_parent_group1           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      dir: ~
      run: <<1>>
      suffix: asl
  - provenance: ~
    attributes:
      <<: *perf_parattr
      protocol_name: [ '*ASL*', '*Perfusion*', '*perfusion*' ]
    bids: *perf_parent_group1
  - provenance: ~
    attributes:
      <<: *perf_parattr
      protocol_name: ['*M0Scan*', '*m0scan*']
    bids:
      <<: *perf_parent_group1
      suffix: m0scan
  - provenance: ~
    attributes: *perf_parattr
    bids: &perf_parent_group2           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      dir: ~
      run: <<1>>
      suffix: aslcontext
  - provenance: ~
    attributes: *perf_parattr
    bids: &perf_parent_group3           # See: schema/datatypes/perf.yaml
      acq: <protocol_name>
      rec: <exam_name>
      run: <<1>>
      suffix: asllabeling

  dwi:        # ----------------------- All diffusion runs ---------------------
  - provenance: ~
    attributes: &dwi_parattr
      series_type: ~
      exam_name: ~
      protocol_name: ~
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids: &dwi_parent_DWI               # See: schema/datatypes/dwi.yaml
      acq: <protocol_name>
      dir: ~
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: dwi
  - provenance: ~
    attributes:                         # First match the SBREF dwi runs (the normal dwi runs don't have SBREF in the seriesdescription)
      <<:  *dwi_parattr
      protocol_name: ['*dwi*SBREF*', '*DWI*SBREF*', '*diffusion*SBREF*', '*DIFFUSION*SBREF*', '*dti*SBREF*', '*DTI*']
    bids: &dwi_parent_sbref             # See: schema/datatypes/dwi.yaml
      acq: <protocol_name>
      dir: ~
      run: <<1>>
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: sbref
  - provenance: ~                       # Then catch the normal DWI runs
    attributes:
      <<: *dwi_parattr
      diffusion: 1
    bids: *dwi_parent_DWI

  fmap:       # ----------------------- All fieldmap runs ----------------------
  - provenance: ~
    attributes: &fmap_parattr
      series_type: ~
      exam_name: ~
      protocol_name: ['*fmap*', '*fieldmap*', '*Fieldmap*', '*FieldMap*','*field_map*', '*B0map*', '*b0map*']
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids: &fmap_parent_fieldmaps        # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      run: <<1>>
      suffix: magnitude1
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: magnitude2
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phasediff
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phase1
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: phase2
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: fieldmap
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_fieldmaps
      suffix: magnitude
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_PEPolar          # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce: ~
      dir: ~
      run: <<1>>
      suffix: epi
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_PEPolar
      suffix: m0scan
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1DAM           # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce: ~
      rec: ~
      flip: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1DAM
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1EPI           # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1EPI
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1AFI
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: TB1TFL
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: TB1RFM
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_RFFieldMaps      # See: schema/datatypes/fmap.yaml
      suffix: RB1COR
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_TB1SRGE          # See: schema/datatypes/fmap.yaml
      acq: <protocol_name>
      ce: ~
      rec: ~
      flip: ~
      echo: ~
      inv: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      run: <<1>>
      suffix: TB1SRGE
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids: &fmap_parent_parametric
      acq: <protocol_name>
      ce: ~
      rec: ~
      run: <<1>>
      suffix: TB1map
      IntendedFor: ~
  - provenance: ~
    attributes: *fmap_parattr
    bids:
      <<: *fmap_parent_parametric
      suffix: RB1map

  extra_data: # ----------------------- All extra data -------------------------
  - provenance: ~
    attributes:
      series_type: ~
      exam_name: ~
      protocol_name: ~
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids:
      acq: <protocol_name><exam_name>
      inv: ~
      rec: <tech>
      ce: ~
      task: ~
      echo: ~
      dir: ~
      run: <<1>>
      mod: ~
      part: ['', 'mag', 'phase', 'real', 'imag', 0]
      suffix: <exam_name>

  leave_out:  # ----------------------- Data that will be left out -------------
  - provenance: ~
    attributes:
      series_type: ~
      exam_name: ~
      protocol_name: ['*Scout*', '*scout*', '*localizer*', '*Localizer*']
      tech: ~
      diffusion: ~
      fov: ~
      scan_resolution: ~
      scan_mode: ~
      max_slices: ~
      flow_compensation: ~
      max_echoes: ~
      repetition_time: ~
      prep_direction: ~
    bids:
      acq: <protocol_name><exam_name>
      suffix: <series_type>
